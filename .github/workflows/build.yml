name: Build

on:
  push:
    branches: [ main, ci ]
  pull_request:
    branches: [ main, ci ]
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  PIP_DEPENDENCIES: 'meson ninja pyelftools'
  DOWNLOAD_DIR: 'vendor/dpdk'
  DPDK_FILE_NAME: 'dpdk-21.11.tar.xz'
  DEPENDENCIES: 'rdma-core'

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-22.04
    
    steps:
      - uses: actions/checkout@v3
      - run: sudo apt-get install $DEPENDENCIES
      - run: sudo pip install $PIP_DEPENDENCIES
      - run: alias cmake3 cmake

      - name: Cache DPDK
        id: cache-dpdk
        uses: actions/cache@v3
        env:
          cache-name: cache-dpdk
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: "${{github.workspace}}/${{ env.DOWNLOAD_DIR }}"
          key: ${{runner.os}}-${{runner.arch}}-${{ env.cache-name }}-${{ env.DPDK_FILE_NAME }}

      - if: ${{ steps.cache-dpdk.outputs.cache-hit == false }}
        name: Build DPDK
        env:
          DPDK_URL: 'https://fast.dpdk.org/rel/'
        run: |
          mkdir -p $DOWNLOAD_DIR
          cd $DOWNLOAD_DIR
          wget $DPDK_URL$DPDK_FILE_NAME
          tar xJf $DPDK_FILE_NAME
          cd dpdk-*/
          sudo sh -c "meson build > /dev/null"
          cd build
          sudo sh -c "ninja > /dev/null"

      - name: Install DPDK
        run: |
          cd $DOWNLOAD_DIR/dpdk-*/build/
          sudo sh -c "ninja install > /dev/null"
          sudo sh -c "echo '/usr/local/lib' >> /etc/ld.so.conf"
          sudo ldconfig

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

        # - name: Test
        # working-directory: ${{github.workspace}}/build
        ## Execute tests defined by the CMake configuration.
        ## See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        # run: ctest -C ${{env.BUILD_TYPE}}
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3.1.0
        with:
          # Artifact name
          name: smart_offload # optional, default is artifact
          # A file, directory or wildcard pattern that describes what to upload
          path: |
            ${{github.workspace}}
            !${{github.workspace}}/build
            !${{github.workspace}}/${{env.DOWNLOAD_DIR}}
          # The desired behavior if no files are found using the provided path.
          # Available Options:
          # warn: Output a warning but do not fail the action
          # error: Fail the action with an error message
          # ignore: Do not output any warnings or errors, the action does not fail

          if-no-files-found: error
          # Duration after which artifact will expire in days. 0 means using default retention.
          # Minimum 1 day. Maximum 90 days unless changed from the repository settings page.

          # retention-days: # optional
      
